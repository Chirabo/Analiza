
import math
import numpy as np


class bcolors:
    HEADER = '\033[95m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    PINK = '\033[38;5;206m'
    PURPLE = '\033[38;5;135m'
    WHITE = '\033[38;5;15m'


def find_intervals(func, start, end, step=0.1):

    intervals = []
    x1 = start
    f_x1 = func(x1)

    while x1 < end:
        x2 = x1 + step
        f_x2 = func(x2)

        if f_x1 * f_x2 <= 0:
            intervals.append((x1, x2))
            print(f"{bcolors.WHITE}Interval found: [{x1:.4f}, {x2:.4f}] {bcolors.ENDC}with f(x1)*f(x2) <= 0")

        x1 = x2
        f_x1 = f_x2

    if intervals:
        print(bcolors.WHITE + "\nIntervals:" + bcolors.ENDC, intervals)
    else:
        print(bcolors.WHITE + "\nNo intervals found." + bcolors.ENDC)

    return intervals


def secant_method(func, start_point, end_point, tolerance, max_iterations=1000):
    x0, x1 = start_point, end_point
    iterations = 0

    print(bcolors.UNDERLINE + "\nSecant Method:" + bcolors.ENDC)
    for _ in range(max_iterations):
        iterations += 1
        print(bcolors.PURPLE + f"Iteration: {iterations}" + bcolors.ENDC, f"x0: {x0:.6f}, x1: {x1:.6f}")

        f_x0 = func(x0)
        f_x1 = func(x1)

        if f_x1 - f_x0 == 0:
            print(bcolors.WHITE + "Error: Division by zero." + bcolors.ENDC)
            return None, iterations

        x2 = x1 - f_x1 * (x1 - x0) / (f_x1 - f_x0)

        if abs(x2 - x1) < tolerance:
            return x2, iterations

        x0, x1 = x1, x2

    print(bcolors.WHITE + "Method did not converge." + bcolors.ENDC)
    return None, iterations


def bisection_method(func, start_point, end_point, tolerance):

    iterations = 0
    print(bcolors.UNDERLINE + "\nBisection Method:" + bcolors.ENDC)
    while (end_point - start_point) / 2 > tolerance:
        iterations += 1
        midpoint = (start_point + end_point) / 2
        print(bcolors.PURPLE + f"Iteration: {iterations}" + bcolors.ENDC, f" {midpoint:.6f}")

        if func(midpoint) == 0:
            return midpoint, iterations
        elif func(start_point) * func(midpoint) < 0:
            end_point = midpoint
        else:
            start_point = midpoint

    root = (start_point + end_point) / 2
    return root, iterations
def newton_raphson(f, df, p0, tol, max_iter=50):
    print(bcolors.OKBLUE,"{:<10} {:<15} {:<15}".format("Iteration", "p0", "p1"),bcolors.ENDC)
    for i in range(max_iter):
        df_p0 = df(p0)
        if df_p0 == 0:
            print("Derivative is zero at p0, method cannot continue.")
            return None

        p = p0 - f(p0) / df_p0

        if abs(p - p0) < tol:
            return p
        print("{:<10} {:<15.9f} {:<15.9f}".format(i, p0, p))
        p0 = p
    return p
def find_all_roots2(f, df, initial_guesses, tol, max_iter):
    roots = []
    for guess in initial_guesses:
        root = newton_raphson(f, df, guess, tol, max_iter)
        if root is not None and all(abs(root - r) > tol for r in roots):
            roots.append(root)
    return roots

if __name__ == '__main__':
    def sample_function(x):
        return (x * np.exp(-x ** 2 + 5 * x)) * (2 * x ** 2 - 3 * x - 5)


    start = 0
    end = 3
    step = 0.0001
    tolerance = 0.0000001

    print(bcolors.HEADER + "\n--- Starting Root Finding Process ---" + bcolors.ENDC)

    print(bcolors.HEADER + "\nFinding intervals where roots exist:" + bcolors.ENDC)
    intervals = find_intervals(sample_function, start, end, step)

    if intervals:
        print(bcolors.HEADER + "\nUsing Bisection Method:" + bcolors.ENDC)
        for interval in intervals:
            root, iterations = bisection_method(sample_function, interval[0], interval[1], tolerance)
            if root is not None:
                print(f"Root found: {root:.6f} (in {iterations} iterations)")

        print(bcolors.HEADER + "\nUsing Secant Method:" + bcolors.ENDC)
        for interval in intervals:
            root, iterations = secant_method(sample_function, interval[0], interval[1], tolerance)
            if root is not None:
                print(f"Root found: {root:.6f} (in {iterations} iterations)")
    else:
        print(bcolors.WHITE + "\nNo valid intervals found to apply root-finding methods." + bcolors.ENDC)

    function = lambda x: (x * np.exp(-x ** 2 + 5 * x)) * (2 * x ** 2 - 3 * x - 5)
    derivative = lambda x: np.exp(-x ** 2 + 5 * x) * (2 * x ** 2 - 3 * x - 5 + 4 * x * (-x + 5))
    initial_guesses = [-1, 0, 1, 2, 3]
    tolerance = 1e-6
    max_iterations = 100
    print(bcolors.PINK, "Using Newton-Raphson method to find roots:", bcolors.ENDC)
    print(bcolors.PINK, "Final result: ",
          find_all_roots2(function, derivative, initial_guesses, tolerance, max_iterations))
