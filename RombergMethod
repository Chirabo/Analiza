
import numpy as np
import matplotlib.pyplot as plt


class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    PINK = '\033[38;5;206m'
    PURPLE = '\033[38;5;135m'
    WHITE = '\033[38;5;15m'


def romberg_integration(func, a, b, n):

    if n <= 0:
        raise ValueError("Number of iterations (n) must be a positive integer.")
    if a >= b:
        raise ValueError("The lower limit 'a' must be less than the upper limit 'b'.")

    h = b - a
    R = np.zeros((n, n), dtype=float)

    # Initial trapezoidal rule estimate
    R[0, 0] = 0.5 * h * (func(a) + func(b))

    for i in range(1, n):
        h /= 2
        sum_term = sum(func(a + k * h) for k in range(1, 2 ** i, 2))
        R[i, 0] = 0.5 * R[i - 1, 0] + h * sum_term

        # Extrapolation for higher-order estimates
        for j in range(1, i + 1):
            R[i, j] = R[i, j - 1] + (R[i, j - 1] - R[i - 1, j - 1]) / ((4 ** j) - 1)

    return R


def f(x):
    return 1 / (2 + x ** 4)

if __name__ == '__main__':
    a = 0
    b = 1
    n = 5

    # Perform Romberg Integration
    R = romberg_integration(f, a, b, n)
    integral = R[n - 1, n - 1]

    print(f"{bcolors.HEADER}Division into n={n} iterations{bcolors.ENDC}")
    print(bcolors.WHITE + f"Approximate integral in range [{a}, {b}] is {integral:.6f}" + bcolors.ENDC)

    # Display the Romberg table
    print(f"{bcolors.PINK}Romberg Table:{bcolors.ENDC}")
    print(R)

    # Plot the function
    x_vals = np.linspace(a, b, 1000)
    y_vals = f(x_vals)
    plt.plot(x_vals, y_vals, label="f(x) = 1 / (2 + x^4)", color="blue")
    plt.fill_between(x_vals, y_vals, where=[a <= x <= b for x in x_vals], color="lightblue", alpha=0.4)
    plt.title("Integration of f(x) = 1 / (2 + x^4)")
    plt.xlabel("x")
    plt.ylabel("f(x)")
    plt.legend()
    plt.show()
